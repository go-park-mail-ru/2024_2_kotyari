// Code generated by MockGen. DO NOT EDIT.
// Source: init.go
//
// Generated by this command:
//
//	mockgen -source=init.go -destination=mocks/mockgen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2024_2_kotyari/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockaddressManager is a mock of addressManager interface.
type MockaddressManager struct {
	ctrl     *gomock.Controller
	recorder *MockaddressManagerMockRecorder
	isgomock struct{}
}

// MockaddressManagerMockRecorder is the mock recorder for MockaddressManager.
type MockaddressManagerMockRecorder struct {
	mock *MockaddressManager
}

// NewMockaddressManager creates a new mock instance.
func NewMockaddressManager(ctrl *gomock.Controller) *MockaddressManager {
	mock := &MockaddressManager{ctrl: ctrl}
	mock.recorder = &MockaddressManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaddressManager) EXPECT() *MockaddressManagerMockRecorder {
	return m.recorder
}

// GetAddressByProfileID mocks base method.
func (m *MockaddressManager) GetAddressByProfileID(ctx context.Context, userID uint32) (model.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByProfileID", ctx, userID)
	ret0, _ := ret[0].(model.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByProfileID indicates an expected call of GetAddressByProfileID.
func (mr *MockaddressManagerMockRecorder) GetAddressByProfileID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByProfileID", reflect.TypeOf((*MockaddressManager)(nil).GetAddressByProfileID), ctx, userID)
}

// UpdateUsersAddress mocks base method.
func (m *MockaddressManager) UpdateUsersAddress(ctx context.Context, addressID uint32, newAddress model.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsersAddress", ctx, addressID, newAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsersAddress indicates an expected call of UpdateUsersAddress.
func (mr *MockaddressManagerMockRecorder) UpdateUsersAddress(ctx, addressID, newAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersAddress", reflect.TypeOf((*MockaddressManager)(nil).UpdateUsersAddress), ctx, addressID, newAddress)
}
