// Code generated by MockGen. DO NOT EDIT.
// Source: init.go
//
// Generated by this command:
//
//	mockgen -source=init.go -destination=mocks/mockgen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2024_2_kotyari/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockpromoCodesMessageProducer is a mock of promoCodesMessageProducer interface.
type MockpromoCodesMessageProducer struct {
	ctrl     *gomock.Controller
	recorder *MockpromoCodesMessageProducerMockRecorder
	isgomock struct{}
}

// MockpromoCodesMessageProducerMockRecorder is the mock recorder for MockpromoCodesMessageProducer.
type MockpromoCodesMessageProducerMockRecorder struct {
	mock *MockpromoCodesMessageProducer
}

// NewMockpromoCodesMessageProducer creates a new mock instance.
func NewMockpromoCodesMessageProducer(ctrl *gomock.Controller) *MockpromoCodesMessageProducer {
	mock := &MockpromoCodesMessageProducer{ctrl: ctrl}
	mock.recorder = &MockpromoCodesMessageProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpromoCodesMessageProducer) EXPECT() *MockpromoCodesMessageProducerMockRecorder {
	return m.recorder
}

// AddPromoCode mocks base method.
func (m *MockpromoCodesMessageProducer) AddPromoCode(ctx context.Context, userID, promoID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPromoCode", ctx, userID, promoID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPromoCode indicates an expected call of AddPromoCode.
func (mr *MockpromoCodesMessageProducerMockRecorder) AddPromoCode(ctx, userID, promoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPromoCode", reflect.TypeOf((*MockpromoCodesMessageProducer)(nil).AddPromoCode), ctx, userID, promoID)
}

// MockusersRepository is a mock of usersRepository interface.
type MockusersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockusersRepositoryMockRecorder
	isgomock struct{}
}

// MockusersRepositoryMockRecorder is the mock recorder for MockusersRepository.
type MockusersRepositoryMockRecorder struct {
	mock *MockusersRepository
}

// NewMockusersRepository creates a new mock instance.
func NewMockusersRepository(ctrl *gomock.Controller) *MockusersRepository {
	mock := &MockusersRepository{ctrl: ctrl}
	mock.recorder = &MockusersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusersRepository) EXPECT() *MockusersRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockusersRepository) CreateUser(ctx context.Context, userModel model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userModel)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockusersRepositoryMockRecorder) CreateUser(ctx, userModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockusersRepository)(nil).CreateUser), ctx, userModel)
}

// GetUserByEmail mocks base method.
func (m *MockusersRepository) GetUserByEmail(ctx context.Context, userModel model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, userModel)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockusersRepositoryMockRecorder) GetUserByEmail(ctx, userModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockusersRepository)(nil).GetUserByEmail), ctx, userModel)
}

// GetUserByUserID mocks base method.
func (m *MockusersRepository) GetUserByUserID(ctx context.Context, id uint32) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserID", ctx, id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserID indicates an expected call of GetUserByUserID.
func (mr *MockusersRepositoryMockRecorder) GetUserByUserID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserID", reflect.TypeOf((*MockusersRepository)(nil).GetUserByUserID), ctx, id)
}
