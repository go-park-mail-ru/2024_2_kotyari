// Code generated by MockGen. DO NOT EDIT.
// Source: init.go
//
// Generated by this command:
//
//	mockgen -source=init.go -destination=mocks/mockgen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2024_2_kotyari/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockcartManager is a mock of cartManager interface.
type MockcartManager struct {
	ctrl     *gomock.Controller
	recorder *MockcartManagerMockRecorder
	isgomock struct{}
}

// MockcartManagerMockRecorder is the mock recorder for MockcartManager.
type MockcartManagerMockRecorder struct {
	mock *MockcartManager
}

// NewMockcartManager creates a new mock instance.
func NewMockcartManager(ctrl *gomock.Controller) *MockcartManager {
	mock := &MockcartManager{ctrl: ctrl}
	mock.recorder = &MockcartManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcartManager) EXPECT() *MockcartManagerMockRecorder {
	return m.recorder
}

// GetCartProductCount mocks base method.
func (m *MockcartManager) GetCartProductCount(ctx context.Context, userID, productID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartProductCount", ctx, userID, productID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartProductCount indicates an expected call of GetCartProductCount.
func (mr *MockcartManagerMockRecorder) GetCartProductCount(ctx, userID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartProductCount", reflect.TypeOf((*MockcartManager)(nil).GetCartProductCount), ctx, userID, productID)
}

// ProductInCart mocks base method.
func (m *MockcartManager) ProductInCart(ctx context.Context, userId, productId uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductInCart", ctx, userId, productId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductInCart indicates an expected call of ProductInCart.
func (mr *MockcartManagerMockRecorder) ProductInCart(ctx, userId, productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductInCart", reflect.TypeOf((*MockcartManager)(nil).ProductInCart), ctx, userId, productId)
}

// MockproductCardGetter is a mock of productCardGetter interface.
type MockproductCardGetter struct {
	ctrl     *gomock.Controller
	recorder *MockproductCardGetterMockRecorder
	isgomock struct{}
}

// MockproductCardGetterMockRecorder is the mock recorder for MockproductCardGetter.
type MockproductCardGetterMockRecorder struct {
	mock *MockproductCardGetter
}

// NewMockproductCardGetter creates a new mock instance.
func NewMockproductCardGetter(ctrl *gomock.Controller) *MockproductCardGetter {
	mock := &MockproductCardGetter{ctrl: ctrl}
	mock.recorder = &MockproductCardGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductCardGetter) EXPECT() *MockproductCardGetterMockRecorder {
	return m.recorder
}

// GetProductByID mocks base method.
func (m *MockproductCardGetter) GetProductByID(ctx context.Context, productID uint32) (model.ProductCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, productID)
	ret0, _ := ret[0].(model.ProductCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockproductCardGetterMockRecorder) GetProductByID(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockproductCardGetter)(nil).GetProductByID), ctx, productID)
}
