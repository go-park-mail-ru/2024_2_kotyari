// Code generated by MockGen. DO NOT EDIT.
// Source: init.go
//
// Generated by this command:
//
//	mockgen -source=init.go -destination=mocks/mockgen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2024_2_kotyari/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockreviewsRepo is a mock of reviewsRepo interface.
type MockreviewsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockreviewsRepoMockRecorder
	isgomock struct{}
}

// MockreviewsRepoMockRecorder is the mock recorder for MockreviewsRepo.
type MockreviewsRepoMockRecorder struct {
	mock *MockreviewsRepo
}

// NewMockreviewsRepo creates a new mock instance.
func NewMockreviewsRepo(ctrl *gomock.Controller) *MockreviewsRepo {
	mock := &MockreviewsRepo{ctrl: ctrl}
	mock.recorder = &MockreviewsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreviewsRepo) EXPECT() *MockreviewsRepoMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockreviewsRepo) AddReview(ctx context.Context, productID, userID uint32, review model.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", ctx, productID, userID, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview.
func (mr *MockreviewsRepoMockRecorder) AddReview(ctx, productID, userID, review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockreviewsRepo)(nil).AddReview), ctx, productID, userID, review)
}

// DeleteReview mocks base method.
func (m *MockreviewsRepo) DeleteReview(ctx context.Context, productID, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", ctx, productID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockreviewsRepoMockRecorder) DeleteReview(ctx, productID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockreviewsRepo)(nil).DeleteReview), ctx, productID, userID)
}

// GetProductReviewsNoLogin mocks base method.
func (m *MockreviewsRepo) GetProductReviewsNoLogin(ctx context.Context, productID uint32, sortField, sortOrder string) (model.Reviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductReviewsNoLogin", ctx, productID, sortField, sortOrder)
	ret0, _ := ret[0].(model.Reviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductReviewsNoLogin indicates an expected call of GetProductReviewsNoLogin.
func (mr *MockreviewsRepoMockRecorder) GetProductReviewsNoLogin(ctx, productID, sortField, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductReviewsNoLogin", reflect.TypeOf((*MockreviewsRepo)(nil).GetProductReviewsNoLogin), ctx, productID, sortField, sortOrder)
}

// GetProductReviewsWithLogin mocks base method.
func (m *MockreviewsRepo) GetProductReviewsWithLogin(ctx context.Context, productID, userID uint32, sortField, sortOrder string) (model.Reviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductReviewsWithLogin", ctx, productID, userID, sortField, sortOrder)
	ret0, _ := ret[0].(model.Reviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductReviewsWithLogin indicates an expected call of GetProductReviewsWithLogin.
func (mr *MockreviewsRepoMockRecorder) GetProductReviewsWithLogin(ctx, productID, userID, sortField, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductReviewsWithLogin", reflect.TypeOf((*MockreviewsRepo)(nil).GetProductReviewsWithLogin), ctx, productID, userID, sortField, sortOrder)
}

// GetReview mocks base method.
func (m *MockreviewsRepo) GetReview(ctx context.Context, productID, userID uint32) (model.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", ctx, productID, userID)
	ret0, _ := ret[0].(model.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview.
func (mr *MockreviewsRepoMockRecorder) GetReview(ctx, productID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockreviewsRepo)(nil).GetReview), ctx, productID, userID)
}

// UpdateReview mocks base method.
func (m *MockreviewsRepo) UpdateReview(ctx context.Context, productID, userID uint32, review model.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", ctx, productID, userID, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockreviewsRepoMockRecorder) UpdateReview(ctx, productID, userID, review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockreviewsRepo)(nil).UpdateReview), ctx, productID, userID, review)
}

// MockratingUpdater is a mock of ratingUpdater interface.
type MockratingUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockratingUpdaterMockRecorder
	isgomock struct{}
}

// MockratingUpdaterMockRecorder is the mock recorder for MockratingUpdater.
type MockratingUpdaterMockRecorder struct {
	mock *MockratingUpdater
}

// NewMockratingUpdater creates a new mock instance.
func NewMockratingUpdater(ctrl *gomock.Controller) *MockratingUpdater {
	mock := &MockratingUpdater{ctrl: ctrl}
	mock.recorder = &MockratingUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockratingUpdater) EXPECT() *MockratingUpdaterMockRecorder {
	return m.recorder
}

// UpdateRating mocks base method.
func (m *MockratingUpdater) UpdateRating(ctx context.Context, productID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockratingUpdaterMockRecorder) UpdateRating(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockratingUpdater)(nil).UpdateRating), ctx, productID)
}
