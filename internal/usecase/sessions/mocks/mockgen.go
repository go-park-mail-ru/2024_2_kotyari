// Code generated by MockGen. DO NOT EDIT.
// Source: init.go
//
// Generated by this command:
//
//	mockgen -source=init.go -destination=mocks/mockgen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2024_2_kotyari/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MocksessionRepository is a mock of sessionRepository interface.
type MocksessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MocksessionRepositoryMockRecorder
	isgomock struct{}
}

// MocksessionRepositoryMockRecorder is the mock recorder for MocksessionRepository.
type MocksessionRepositoryMockRecorder struct {
	mock *MocksessionRepository
}

// NewMocksessionRepository creates a new mock instance.
func NewMocksessionRepository(ctrl *gomock.Controller) *MocksessionRepository {
	mock := &MocksessionRepository{ctrl: ctrl}
	mock.recorder = &MocksessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksessionRepository) EXPECT() *MocksessionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MocksessionRepository) Create(ctx context.Context, session model.Session) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, session)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MocksessionRepositoryMockRecorder) Create(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MocksessionRepository)(nil).Create), ctx, session)
}

// Delete mocks base method.
func (m *MocksessionRepository) Delete(ctx context.Context, session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MocksessionRepositoryMockRecorder) Delete(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MocksessionRepository)(nil).Delete), ctx, session)
}

// Get mocks base method.
func (m *MocksessionRepository) Get(ctx context.Context, sessionID string) (model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, sessionID)
	ret0, _ := ret[0].(model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MocksessionRepositoryMockRecorder) Get(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MocksessionRepository)(nil).Get), ctx, sessionID)
}
