// Code generated by MockGen. DO NOT EDIT.
// Source: init.go
//
// Generated by this command:
//
//	mockgen -source=init.go -destination=mocks/mockgen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2024_2_kotyari/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRatingUpdaterRepository is a mock of RatingUpdaterRepository interface.
type MockRatingUpdaterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRatingUpdaterRepositoryMockRecorder
	isgomock struct{}
}

// MockRatingUpdaterRepositoryMockRecorder is the mock recorder for MockRatingUpdaterRepository.
type MockRatingUpdaterRepositoryMockRecorder struct {
	mock *MockRatingUpdaterRepository
}

// NewMockRatingUpdaterRepository creates a new mock instance.
func NewMockRatingUpdaterRepository(ctrl *gomock.Controller) *MockRatingUpdaterRepository {
	mock := &MockRatingUpdaterRepository{ctrl: ctrl}
	mock.recorder = &MockRatingUpdaterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatingUpdaterRepository) EXPECT() *MockRatingUpdaterRepositoryMockRecorder {
	return m.recorder
}

// UpdateProductRating mocks base method.
func (m *MockRatingUpdaterRepository) UpdateProductRating(ctx context.Context, productID uint32, newRating float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductRating", ctx, productID, newRating)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductRating indicates an expected call of UpdateProductRating.
func (mr *MockRatingUpdaterRepositoryMockRecorder) UpdateProductRating(ctx, productID, newRating any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductRating", reflect.TypeOf((*MockRatingUpdaterRepository)(nil).UpdateProductRating), ctx, productID, newRating)
}

// MockReviewsGetter is a mock of ReviewsGetter interface.
type MockReviewsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockReviewsGetterMockRecorder
	isgomock struct{}
}

// MockReviewsGetterMockRecorder is the mock recorder for MockReviewsGetter.
type MockReviewsGetterMockRecorder struct {
	mock *MockReviewsGetter
}

// NewMockReviewsGetter creates a new mock instance.
func NewMockReviewsGetter(ctrl *gomock.Controller) *MockReviewsGetter {
	mock := &MockReviewsGetter{ctrl: ctrl}
	mock.recorder = &MockReviewsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewsGetter) EXPECT() *MockReviewsGetterMockRecorder {
	return m.recorder
}

// GetProductReviews mocks base method.
func (m *MockReviewsGetter) GetProductReviews(ctx context.Context, productID uint32, sortField, sortOrder string) (model.Reviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductReviews", ctx, productID, sortField, sortOrder)
	ret0, _ := ret[0].(model.Reviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductReviews indicates an expected call of GetProductReviews.
func (mr *MockReviewsGetterMockRecorder) GetProductReviews(ctx, productID, sortField, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductReviews", reflect.TypeOf((*MockReviewsGetter)(nil).GetProductReviews), ctx, productID, sortField, sortOrder)
}
