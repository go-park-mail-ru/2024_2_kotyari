// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockfilesRepo is a mock of filesRepo interface.
type MockfilesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockfilesRepoMockRecorder
}

// MockfilesRepoMockRecorder is the mock recorder for MockfilesRepo.
type MockfilesRepoMockRecorder struct {
	mock *MockfilesRepo
}

// NewMockfilesRepo creates a new mock instance.
func NewMockfilesRepo(ctrl *gomock.Controller) *MockfilesRepo {
	mock := &MockfilesRepo{ctrl: ctrl}
	mock.recorder = &MockfilesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfilesRepo) EXPECT() *MockfilesRepoMockRecorder {
	return m.recorder
}

// GetFile mocks base method.
func (m *MockfilesRepo) GetFile(filename string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", filename)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockfilesRepoMockRecorder) GetFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockfilesRepo)(nil).GetFile), filename)
}

// SaveFile mocks base method.
func (m *MockfilesRepo) SaveFile(filename string, file *os.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", filename, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockfilesRepoMockRecorder) SaveFile(filename, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockfilesRepo)(nil).SaveFile), filename, file)
}
