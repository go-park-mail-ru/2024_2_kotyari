// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2024_2_kotyari/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockprofileRepository is a mock of profileRepository interface.
type MockprofileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockprofileRepositoryMockRecorder
}

// MockprofileRepositoryMockRecorder is the mock recorder for MockprofileRepository.
type MockprofileRepositoryMockRecorder struct {
	mock *MockprofileRepository
}

// NewMockprofileRepository creates a new mock instance.
func NewMockprofileRepository(ctrl *gomock.Controller) *MockprofileRepository {
	mock := &MockprofileRepository{ctrl: ctrl}
	mock.recorder = &MockprofileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprofileRepository) EXPECT() *MockprofileRepositoryMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockprofileRepository) GetProfile(ctx context.Context, Id uint32) (model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, Id)
	ret0, _ := ret[0].(model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockprofileRepositoryMockRecorder) GetProfile(ctx, Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockprofileRepository)(nil).GetProfile), ctx, Id)
}

// UpdateProfile mocks base method.
func (m *MockprofileRepository) UpdateProfile(ctx context.Context, profileID uint32, profileModel model.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, profileID, profileModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockprofileRepositoryMockRecorder) UpdateProfile(ctx, profileID, profileModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockprofileRepository)(nil).UpdateProfile), ctx, profileID, profileModel)
}

// MockuserStore is a mock of userStore interface.
type MockuserStore struct {
	ctrl     *gomock.Controller
	recorder *MockuserStoreMockRecorder
}

// MockuserStoreMockRecorder is the mock recorder for MockuserStore.
type MockuserStoreMockRecorder struct {
	mock *MockuserStore
}

// NewMockuserStore creates a new mock instance.
func NewMockuserStore(ctrl *gomock.Controller) *MockuserStore {
	mock := &MockuserStore{ctrl: ctrl}
	mock.recorder = &MockuserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserStore) EXPECT() *MockuserStoreMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockuserStore) ChangePassword(ctx context.Context, userId uint32, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userId, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockuserStoreMockRecorder) ChangePassword(ctx, userId, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockuserStore)(nil).ChangePassword), ctx, userId, newPassword)
}

// GetUserByEmail mocks base method.
func (m *MockuserStore) GetUserByEmail(ctx context.Context, userModel model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, userModel)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockuserStoreMockRecorder) GetUserByEmail(ctx, userModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockuserStore)(nil).GetUserByEmail), ctx, userModel)
}

// GetUserByUserID mocks base method.
func (m *MockuserStore) GetUserByUserID(ctx context.Context, id uint32) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserID", ctx, id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserID indicates an expected call of GetUserByUserID.
func (mr *MockuserStoreMockRecorder) GetUserByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserID", reflect.TypeOf((*MockuserStore)(nil).GetUserByUserID), ctx, id)
}
