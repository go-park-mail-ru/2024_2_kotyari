// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/profile/init.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	os "os"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2024_2_kotyari/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockprofileRepository is a mock of profileRepository interface.
type MockprofileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockprofileRepositoryMockRecorder
}

// MockprofileRepositoryMockRecorder is the mock recorder for MockprofileRepository.
type MockprofileRepositoryMockRecorder struct {
	mock *MockprofileRepository
}

// NewMockprofileRepository creates a new mock instance.
func NewMockprofileRepository(ctrl *gomock.Controller) *MockprofileRepository {
	mock := &MockprofileRepository{ctrl: ctrl}
	mock.recorder = &MockprofileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprofileRepository) EXPECT() *MockprofileRepositoryMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockprofileRepository) GetProfile(ctx context.Context, Id uint32) (model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, Id)
	ret0, _ := ret[0].(model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockprofileRepositoryMockRecorder) GetProfile(ctx, Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockprofileRepository)(nil).GetProfile), ctx, Id)
}

// UpdateProfile mocks base method.
func (m *MockprofileRepository) UpdateProfile(ctx context.Context, profileID uint32, profileModel model.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, profileID, profileModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockprofileRepositoryMockRecorder) UpdateProfile(ctx, profileID, profileModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockprofileRepository)(nil).UpdateProfile), ctx, profileID, profileModel)
}

// UpdateProfileAvatar mocks base method.
func (m *MockprofileRepository) UpdateProfileAvatar(ctx context.Context, profileID uint32, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileAvatar", ctx, profileID, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfileAvatar indicates an expected call of UpdateProfileAvatar.
func (mr *MockprofileRepositoryMockRecorder) UpdateProfileAvatar(ctx, profileID, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileAvatar", reflect.TypeOf((*MockprofileRepository)(nil).UpdateProfileAvatar), ctx, profileID, filePath)
}

// MockimageSaver is a mock of imageSaver interface.
type MockimageSaver struct {
	ctrl     *gomock.Controller
	recorder *MockimageSaverMockRecorder
}

// MockimageSaverMockRecorder is the mock recorder for MockimageSaver.
type MockimageSaverMockRecorder struct {
	mock *MockimageSaver
}

// NewMockimageSaver creates a new mock instance.
func NewMockimageSaver(ctrl *gomock.Controller) *MockimageSaver {
	mock := &MockimageSaver{ctrl: ctrl}
	mock.recorder = &MockimageSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockimageSaver) EXPECT() *MockimageSaverMockRecorder {
	return m.recorder
}

// SaveImage mocks base method.
func (m *MockimageSaver) SaveImage(filename string, file *os.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", filename, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockimageSaverMockRecorder) SaveImage(filename, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockimageSaver)(nil).SaveImage), filename, file)
}
