// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	file "github.com/go-park-mail-ru/2024_2_kotyari/internal/usecase/file"
	gomock "github.com/golang/mock/gomock"
)

// MockfilesUsecase is a mock of filesUsecase interface.
type MockfilesUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockfilesUsecaseMockRecorder
}

// MockfilesUsecaseMockRecorder is the mock recorder for MockfilesUsecase.
type MockfilesUsecaseMockRecorder struct {
	mock *MockfilesUsecase
}

// NewMockfilesUsecase creates a new mock instance.
func NewMockfilesUsecase(ctrl *gomock.Controller) *MockfilesUsecase {
	mock := &MockfilesUsecase{ctrl: ctrl}
	mock.recorder = &MockfilesUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfilesUsecase) EXPECT() *MockfilesUsecaseMockRecorder {
	return m.recorder
}

// SaveFile mocks base method.
func (m *MockfilesUsecase) SaveFile(filename string, file *os.File, checkFile file.CheckFileFunc) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", filename, file, checkFile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockfilesUsecaseMockRecorder) SaveFile(filename, file, checkFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockfilesUsecase)(nil).SaveFile), filename, file, checkFile)
}
