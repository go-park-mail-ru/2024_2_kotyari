// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2024_2_kotyari/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockwishListRepo is a mock of wishListRepo interface.
type MockwishListRepo struct {
	ctrl     *gomock.Controller
	recorder *MockwishListRepoMockRecorder
}

// MockwishListRepoMockRecorder is the mock recorder for MockwishListRepo.
type MockwishListRepoMockRecorder struct {
	mock *MockwishListRepo
}

// NewMockwishListRepo creates a new mock instance.
func NewMockwishListRepo(ctrl *gomock.Controller) *MockwishListRepo {
	mock := &MockwishListRepo{ctrl: ctrl}
	mock.recorder = &MockwishListRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwishListRepo) EXPECT() *MockwishListRepoMockRecorder {
	return m.recorder
}

// AddProductToWishlists mocks base method.
func (m *MockwishListRepo) AddProductToWishlists(ctx context.Context, userID uint32, links []string, productID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductToWishlists", ctx, userID, links, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductToWishlists indicates an expected call of AddProductToWishlists.
func (mr *MockwishListRepoMockRecorder) AddProductToWishlists(ctx, userID, links, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductToWishlists", reflect.TypeOf((*MockwishListRepo)(nil).AddProductToWishlists), ctx, userID, links, productID)
}

// CopyWishlist mocks base method.
func (m *MockwishListRepo) CopyWishlist(ctx context.Context, sourceUserID uint32, sourceLink string, targetUserID uint32, newLink string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyWishlist", ctx, sourceUserID, sourceLink, targetUserID, newLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyWishlist indicates an expected call of CopyWishlist.
func (mr *MockwishListRepoMockRecorder) CopyWishlist(ctx, sourceUserID, sourceLink, targetUserID, newLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyWishlist", reflect.TypeOf((*MockwishListRepo)(nil).CopyWishlist), ctx, sourceUserID, sourceLink, targetUserID, newLink)
}

// CreateWishlist mocks base method.
func (m *MockwishListRepo) CreateWishlist(ctx context.Context, userID uint32, name, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWishlist", ctx, userID, name, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWishlist indicates an expected call of CreateWishlist.
func (mr *MockwishListRepoMockRecorder) CreateWishlist(ctx, userID, name, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWishlist", reflect.TypeOf((*MockwishListRepo)(nil).CreateWishlist), ctx, userID, name, link)
}

// DeleteWishlist mocks base method.
func (m *MockwishListRepo) DeleteWishlist(ctx context.Context, userID uint32, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWishlist", ctx, userID, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWishlist indicates an expected call of DeleteWishlist.
func (mr *MockwishListRepoMockRecorder) DeleteWishlist(ctx, userID, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWishlist", reflect.TypeOf((*MockwishListRepo)(nil).DeleteWishlist), ctx, userID, link)
}

// GetALlUserWishlists mocks base method.
func (m *MockwishListRepo) GetALlUserWishlists(ctx context.Context, userID uint32) ([]model.Wishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetALlUserWishlists", ctx, userID)
	ret0, _ := ret[0].([]model.Wishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetALlUserWishlists indicates an expected call of GetALlUserWishlists.
func (mr *MockwishListRepoMockRecorder) GetALlUserWishlists(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetALlUserWishlists", reflect.TypeOf((*MockwishListRepo)(nil).GetALlUserWishlists), ctx, userID)
}

// GetWishListByLink mocks base method.
func (m *MockwishListRepo) GetWishListByLink(ctx context.Context, userID uint32, link string) (model.Wishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishListByLink", ctx, userID, link)
	ret0, _ := ret[0].(model.Wishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishListByLink indicates an expected call of GetWishListByLink.
func (mr *MockwishListRepoMockRecorder) GetWishListByLink(ctx, userID, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishListByLink", reflect.TypeOf((*MockwishListRepo)(nil).GetWishListByLink), ctx, userID, link)
}

// RemoveProductFromWishlists mocks base method.
func (m *MockwishListRepo) RemoveProductFromWishlists(ctx context.Context, userID uint32, links []string, productID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProductFromWishlists", ctx, userID, links, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProductFromWishlists indicates an expected call of RemoveProductFromWishlists.
func (mr *MockwishListRepoMockRecorder) RemoveProductFromWishlists(ctx, userID, links, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProductFromWishlists", reflect.TypeOf((*MockwishListRepo)(nil).RemoveProductFromWishlists), ctx, userID, links, productID)
}

// RenameWishlist mocks base method.
func (m *MockwishListRepo) RenameWishlist(ctx context.Context, userID uint32, newName, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameWishlist", ctx, userID, newName, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameWishlist indicates an expected call of RenameWishlist.
func (mr *MockwishListRepoMockRecorder) RenameWishlist(ctx, userID, newName, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameWishlist", reflect.TypeOf((*MockwishListRepo)(nil).RenameWishlist), ctx, userID, newName, link)
}

// MockwishListLinkRepo is a mock of wishListLinkRepo interface.
type MockwishListLinkRepo struct {
	ctrl     *gomock.Controller
	recorder *MockwishListLinkRepoMockRecorder
}

// MockwishListLinkRepoMockRecorder is the mock recorder for MockwishListLinkRepo.
type MockwishListLinkRepoMockRecorder struct {
	mock *MockwishListLinkRepo
}

// NewMockwishListLinkRepo creates a new mock instance.
func NewMockwishListLinkRepo(ctrl *gomock.Controller) *MockwishListLinkRepo {
	mock := &MockwishListLinkRepo{ctrl: ctrl}
	mock.recorder = &MockwishListLinkRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwishListLinkRepo) EXPECT() *MockwishListLinkRepoMockRecorder {
	return m.recorder
}

// CreateLink mocks base method.
func (m *MockwishListLinkRepo) CreateLink(ctx context.Context, userID uint32, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", ctx, userID, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockwishListLinkRepoMockRecorder) CreateLink(ctx, userID, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockwishListLinkRepo)(nil).CreateLink), ctx, userID, link)
}

// DeleteWishListLink mocks base method.
func (m *MockwishListLinkRepo) DeleteWishListLink(ctx context.Context, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWishListLink", ctx, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWishListLink indicates an expected call of DeleteWishListLink.
func (mr *MockwishListLinkRepoMockRecorder) DeleteWishListLink(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWishListLink", reflect.TypeOf((*MockwishListLinkRepo)(nil).DeleteWishListLink), ctx, link)
}

// GetUserIDFromLink mocks base method.
func (m *MockwishListLinkRepo) GetUserIDFromLink(ctx context.Context, link string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromLink", ctx, link)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromLink indicates an expected call of GetUserIDFromLink.
func (mr *MockwishListLinkRepoMockRecorder) GetUserIDFromLink(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromLink", reflect.TypeOf((*MockwishListLinkRepo)(nil).GetUserIDFromLink), ctx, link)
}
