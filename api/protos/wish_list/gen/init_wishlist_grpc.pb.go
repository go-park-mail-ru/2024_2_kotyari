// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: init_wishlist.proto

package grpc_gen

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WishlistService_AddProductToWishlists_FullMethodName = "/wishlist.WishlistService/AddProductToWishlists"
	WishlistService_CopyWishlist_FullMethodName          = "/wishlist.WishlistService/CopyWishlist"
	WishlistService_CreateWishlist_FullMethodName        = "/wishlist.WishlistService/CreateWishlist"
	WishlistService_DeleteWishlist_FullMethodName        = "/wishlist.WishlistService/DeleteWishlist"
	WishlistService_GetAllUserWishlists_FullMethodName   = "/wishlist.WishlistService/GetAllUserWishlists"
	WishlistService_GetWishlistByLink_FullMethodName     = "/wishlist.WishlistService/GetWishlistByLink"
	WishlistService_RemoveFromWishlists_FullMethodName   = "/wishlist.WishlistService/RemoveFromWishlists"
	WishlistService_RenameWishlist_FullMethodName        = "/wishlist.WishlistService/RenameWishlist"
)

// WishlistServiceClient is the client API for WishlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WishlistServiceClient interface {
	AddProductToWishlists(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CopyWishlist(ctx context.Context, in *CopyWishlistRequest, opts ...grpc.CallOption) (*CopyWishlistResponse, error)
	CreateWishlist(ctx context.Context, in *CreateWishlistRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteWishlist(ctx context.Context, in *DeleteWishlistRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAllUserWishlists(ctx context.Context, in *GetAllWishlistsRequest, opts ...grpc.CallOption) (*GetAllWishlistsResponse, error)
	GetWishlistByLink(ctx context.Context, in *GetWishlistByLinkRequest, opts ...grpc.CallOption) (*GetWishlistByLinkResponse, error)
	RemoveFromWishlists(ctx context.Context, in *RemoveFromWishlistsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RenameWishlist(ctx context.Context, in *RenameWishlistRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type wishlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishlistServiceClient(cc grpc.ClientConnInterface) WishlistServiceClient {
	return &wishlistServiceClient{cc}
}

func (c *wishlistServiceClient) AddProductToWishlists(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, WishlistService_AddProductToWishlists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) CopyWishlist(ctx context.Context, in *CopyWishlistRequest, opts ...grpc.CallOption) (*CopyWishlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyWishlistResponse)
	err := c.cc.Invoke(ctx, WishlistService_CopyWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) CreateWishlist(ctx context.Context, in *CreateWishlistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, WishlistService_CreateWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) DeleteWishlist(ctx context.Context, in *DeleteWishlistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, WishlistService_DeleteWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) GetAllUserWishlists(ctx context.Context, in *GetAllWishlistsRequest, opts ...grpc.CallOption) (*GetAllWishlistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllWishlistsResponse)
	err := c.cc.Invoke(ctx, WishlistService_GetAllUserWishlists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) GetWishlistByLink(ctx context.Context, in *GetWishlistByLinkRequest, opts ...grpc.CallOption) (*GetWishlistByLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWishlistByLinkResponse)
	err := c.cc.Invoke(ctx, WishlistService_GetWishlistByLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) RemoveFromWishlists(ctx context.Context, in *RemoveFromWishlistsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, WishlistService_RemoveFromWishlists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) RenameWishlist(ctx context.Context, in *RenameWishlistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, WishlistService_RenameWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishlistServiceServer is the server API for WishlistService service.
// All implementations must embed UnimplementedWishlistServiceServer
// for forward compatibility.
type WishlistServiceServer interface {
	AddProductToWishlists(context.Context, *AddProductRequest) (*empty.Empty, error)
	CopyWishlist(context.Context, *CopyWishlistRequest) (*CopyWishlistResponse, error)
	CreateWishlist(context.Context, *CreateWishlistRequest) (*empty.Empty, error)
	DeleteWishlist(context.Context, *DeleteWishlistRequest) (*empty.Empty, error)
	GetAllUserWishlists(context.Context, *GetAllWishlistsRequest) (*GetAllWishlistsResponse, error)
	GetWishlistByLink(context.Context, *GetWishlistByLinkRequest) (*GetWishlistByLinkResponse, error)
	RemoveFromWishlists(context.Context, *RemoveFromWishlistsRequest) (*empty.Empty, error)
	RenameWishlist(context.Context, *RenameWishlistRequest) (*empty.Empty, error)
	mustEmbedUnimplementedWishlistServiceServer()
}

// UnimplementedWishlistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWishlistServiceServer struct{}

func (UnimplementedWishlistServiceServer) AddProductToWishlists(context.Context, *AddProductRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToWishlists not implemented")
}
func (UnimplementedWishlistServiceServer) CopyWishlist(context.Context, *CopyWishlistRequest) (*CopyWishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) CreateWishlist(context.Context, *CreateWishlistRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) DeleteWishlist(context.Context, *DeleteWishlistRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) GetAllUserWishlists(context.Context, *GetAllWishlistsRequest) (*GetAllWishlistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserWishlists not implemented")
}
func (UnimplementedWishlistServiceServer) GetWishlistByLink(context.Context, *GetWishlistByLinkRequest) (*GetWishlistByLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishlistByLink not implemented")
}
func (UnimplementedWishlistServiceServer) RemoveFromWishlists(context.Context, *RemoveFromWishlistsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWishlists not implemented")
}
func (UnimplementedWishlistServiceServer) RenameWishlist(context.Context, *RenameWishlistRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) mustEmbedUnimplementedWishlistServiceServer() {}
func (UnimplementedWishlistServiceServer) testEmbeddedByValue()                         {}

// UnsafeWishlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WishlistServiceServer will
// result in compilation errors.
type UnsafeWishlistServiceServer interface {
	mustEmbedUnimplementedWishlistServiceServer()
}

func RegisterWishlistServiceServer(s grpc.ServiceRegistrar, srv WishlistServiceServer) {
	// If the following call pancis, it indicates UnimplementedWishlistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WishlistService_ServiceDesc, srv)
}

func _WishlistService_AddProductToWishlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).AddProductToWishlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_AddProductToWishlists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).AddProductToWishlists(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_CopyWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).CopyWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_CopyWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).CopyWishlist(ctx, req.(*CopyWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_CreateWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_CreateWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, req.(*CreateWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_DeleteWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).DeleteWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_DeleteWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).DeleteWishlist(ctx, req.(*DeleteWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_GetAllUserWishlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWishlistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).GetAllUserWishlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_GetAllUserWishlists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).GetAllUserWishlists(ctx, req.(*GetAllWishlistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_GetWishlistByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWishlistByLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).GetWishlistByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_GetWishlistByLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).GetWishlistByLink(ctx, req.(*GetWishlistByLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_RemoveFromWishlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromWishlistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).RemoveFromWishlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_RemoveFromWishlists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).RemoveFromWishlists(ctx, req.(*RemoveFromWishlistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_RenameWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).RenameWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_RenameWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).RenameWishlist(ctx, req.(*RenameWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WishlistService_ServiceDesc is the grpc.ServiceDesc for WishlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WishlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wishlist.WishlistService",
	HandlerType: (*WishlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductToWishlists",
			Handler:    _WishlistService_AddProductToWishlists_Handler,
		},
		{
			MethodName: "CopyWishlist",
			Handler:    _WishlistService_CopyWishlist_Handler,
		},
		{
			MethodName: "CreateWishlist",
			Handler:    _WishlistService_CreateWishlist_Handler,
		},
		{
			MethodName: "DeleteWishlist",
			Handler:    _WishlistService_DeleteWishlist_Handler,
		},
		{
			MethodName: "GetAllUserWishlists",
			Handler:    _WishlistService_GetAllUserWishlists_Handler,
		},
		{
			MethodName: "GetWishlistByLink",
			Handler:    _WishlistService_GetWishlistByLink_Handler,
		},
		{
			MethodName: "RemoveFromWishlists",
			Handler:    _WishlistService_RemoveFromWishlists_Handler,
		},
		{
			MethodName: "RenameWishlist",
			Handler:    _WishlistService_RenameWishlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "init_wishlist.proto",
}
